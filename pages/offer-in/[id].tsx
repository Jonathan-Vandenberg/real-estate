import { GetStaticPaths, GetStaticProps } from "next";
import { ParsedUrlQuery } from "querystring";
import { OfferIn, Document } from "../../types";
import prisma from "../../lib/prisma";
import Head from "next/head";
import OfferInDetails from "../../components/OfferInDetails";
import OfferInForm from "../../components/OfferInForm";
import { Container } from "../../components/Container";
import JokeCard from "../../components/JokeCard";
import { useSession } from "next-auth/react";
import { useEffect, useState } from "react";
import User from "../../components/svgs/User";
import ECCIcon from "../../components/svgs/ECCIcon";
import BankInspectionIcon from "../../components/svgs/BankInspectionIcon";
import MortgageIcon from "../../components/svgs/MortgageIcon";
import ConveyancerIcon from "../../components/svgs/ConveyancerIcon";
import OfferAcceptedIcon from "../../components/svgs/OfferAcceptedIcon";
import WaterIcon from "../../components/svgs/WaterIcon";
import GasIcon from "../../components/svgs/GasIcon";
import IntermologistIcon from "../../components/svgs/IntermologistIcon";
import FicaIcon from "../../components/svgs/FicaIcon";
import classNames from "classnames";

interface IOfferIn {
  offerIn: OfferIn;
  documents: Document[];
}

export default function Blog({ offerIn, documents }: IOfferIn) {
  const [showEdit, setShowEdit] = useState(false);
  const [isPortrait, setIsPortrait] = useState(true);

  useEffect(() => {
    const handleOrientationChange = () => {
      const mediaQuery = window.matchMedia("(orientation: portrait)");
      setIsPortrait(mediaQuery.matches);
    };

    window.addEventListener("orientationchange", handleOrientationChange);

    return () => {
      window.removeEventListener("orientationchange", handleOrientationChange);
    };
  }, []);

  return (
    <div className="flex">
      <Head>
        <title>Landmark</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <div
        className={classNames(
          "flex flex-col items-start justify-between h-[calc(100vh_-_var(--navigation-height))] sticky top-navigation-height bg-white",
          !isPortrait ? "h-[calc(100vh_-_var(--navigation-height))]" : "h-full"
        )}
      >
        <div className="flex-1 border-r-2 border-off-white">
          <ul
            className={classNames(
              "",
              isPortrait
                ? "h-[calc(100vh_-_var(--navigation-height))] px-2 flex flex-col items-center justify-between overflow-auto"
                : "space-y-2 pt-2 pb-4  px-2 text-sm"
            )}
          >
            <li className="hover:bg-off-white rounded-lg pl-[2px]">
              <a
                href="#general"
                className="flex items-center p-2 space-x-3 rounded-md hover:cursor-pointer"
              >
                <svg
                  xmlns="http://www.w3.org/2000/svg"
                  viewBox="0 0 512 512"
                  className="w-5 h-5 fill-current dark:text-gray-400"
                >
                  <path d="M469.666,216.45,271.078,33.749a34,34,0,0,0-47.062.98L41.373,217.373,32,226.745V496H208V328h96V496H480V225.958ZM248.038,56.771c.282,0,.108.061-.013.18C247.9,56.832,247.756,56.771,248.038,56.771ZM448,464H336V328a32,32,0,0,0-32-32H208a32,32,0,0,0-32,32V464H64V240L248.038,57.356c.013-.012.014-.023.024-.035L448,240Z"></path>
                </svg>
                <span className="hidden md:block ">General</span>
              </a>
            </li>
            <li className="rounded-sm hover:bg-off-white">
              <a
                rel="noopener noreferrer"
                href="#ECC"
                className="flex items-center p-2 space-x-3 rounded-md "
              >
                <ECCIcon className="w-6 h-6" />
                <span className="hidden md:block">ECC</span>
              </a>
            </li>
            <li className="rounded-sm hover:bg-off-white">
              <a
                rel="noopener noreferrer"
                href="#FICA"
                className="flex items-center p-2 space-x-3 rounded-md "
              >
                <div className="ml-[2px]">
                  <FicaIcon />
                </div>
                <span className="hidden md:block pl-[1px]">FICA</span>
              </a>
            </li>
            <li className="rounded-sm dark:bg-gray-800 dark:text-gray-50">
              <a
                rel="noopener noreferrer"
                href="#Mortgage"
                className="flex items-center p-2 space-x-3 rounded-md "
              >
                <MortgageIcon />
                <span className="hidden md:block">Mortgage</span>
              </a>
            </li>
            <li className="hover:bg-off-white rounded-lg">
              <a
                className="flex items-center p-2 space-x-3 rounded-md hover:cursor-pointer"
                href="#Conveyancer"
              >
                <div className="-ml-[5px]">
                  <ConveyancerIcon />
                </div>
                <span className="hidden md:block">Conveyancer</span>
              </a>
            </li>
            <li className="rounded-sm hover:bg-off-white">
              <a
                rel="noopener noreferrer"
                href="#BankInspection"
                className="flex items-center p-2 space-x-3 rounded-md "
              >
                <BankInspectionIcon />
                <span className="hidden md:block whitespace-nowrap">
                  Bank Inspection
                </span>
              </a>
            </li>
            <li className="rounded-sm hover:bg-off-white">
              <a
                rel="noopener noreferrer"
                href="#OfferAccepted"
                className="flex items-center p-2 space-x-3 rounded-md "
              >
                <OfferAcceptedIcon />
                <span className="hidden md:block whitespace-nowrap">
                  Offer Accepted
                </span>
              </a>
            </li>
            <li className="rounded-sm hover:bg-off-white">
              <a
                rel="noopener noreferrer"
                href="#Water"
                className="flex items-center p-2 space-x-3 rounded-md "
              >
                <WaterIcon />
                <span className="hidden md:block">Water</span>
              </a>
            </li>
            <li className="rounded-sm hover:bg-off-white">
              <a
                rel="noopener noreferrer"
                href="#Gas"
                className="flex items-center p-2 space-x-3 rounded-md "
              >
                <GasIcon />
                <span className="hidden md:block">Gas</span>
              </a>
            </li>
            <li className="rounded-sm hover:bg-off-white">
              <a
                rel="noopener noreferrer"
                href="#Intermologist"
                className="flex items-center p-2 space-x-3 rounded-md "
              >
                <IntermologistIcon />
                <span className="hidden md:block">Intermologist</span>
              </a>
            </li>
          </ul>
        </div>
      </div>
      {showEdit ? (
        <OfferInForm
          offerIn={offerIn}
          add={false}
          edit={true}
          onClick={() => setShowEdit(!showEdit)}
          propertyId={offerIn.propertyId}
          documents={documents}
        />
      ) : (
        <OfferInDetails
          onClick={() => setShowEdit(!showEdit)}
          offerIn={offerIn}
        />
      )}
    </div>
  );
}

export const getStaticPaths: GetStaticPaths = async () => {
  const offerIn = await prisma.offerIn.findMany();
  const paths = offerIn?.map((item) => {
    return {
      params: { id: item.propertyId },
    };
  });
  return { paths, fallback: false };
};

interface IParams extends ParsedUrlQuery {
  id: string;
}

export const getStaticProps: GetStaticProps = async (context) => {
  const params = context.params as IParams;

  let documents = await prisma.document.findMany();

  let offerIn = await prisma.offerIn.findUnique({
    where: {
      propertyId: params!.id,
    },
    include: {
      ficaDocs: true,
      mortgageOriginator: true,
      conveyancer: true,
      bankInspection: true,
      offerAccepted: true,
      waterCert: true,
      gasCompliance: true,
      intermologist: true,
      elecCompCompany: true,
    },
  });

  let datyfiedOfferIn = await JSON.parse(JSON.stringify(offerIn));

  return {
    props: {
      documents,
      offerIn: datyfiedOfferIn,
      revalidate: 60,
    },
  };
};
